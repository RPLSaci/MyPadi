{"mappings":"ACuCA,eAAe,IACb,GAAI,CACF,IAAI,EAAQ,aAAa,OAAA,CAAQ,QAEjC,EAAQ,KAAK,KAAA,CAAM,GAAO,KAA1B,CAEiB,MAAM,MAAM,UAAU,GAAA,CAAI,aAAc,CACvD,OAAQ,MACR,QAAS,CACP,cAAiB,CAAC,OAAO,EAAE,EAAM,CAAC,AACpC,CACF,EACF,CAAE,MAAO,EAAO,CAEhB,CAEA,GAAI,CASA,UAAU,WAAA,CACV,UAAU,WAAA,CAAY,kBAAA,CAAmB,GAEzC,MAAM,gDAVV,CAAE,MAAO,EAAO,CACd,MAAM,kCACR,CACF,CAiBA,eAAe,EAAa,CAAQ,EAClC,IAAI,EAAM,EAAS,MAAA,CAAO,QAA1B,CACI,EAAO,EAAS,MAAA,CAAO,SAA3B,CAII,IAAM,EAAW,MAAM,MAAM,UAAU,GAAA,CAAI,cAAe,CACxD,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAA,CAPA,CAAE,IAAA,EAAI,KAAA,CAAK,EAQxB,GAGM,EAAO,MAAM,EAAS,IAA5B,GACA,QAAQ,GAAA,CAAI,GACZ,SAAS,cAAA,CAAe,SAAS,SAAA,CAAU,MAAA,CAAO,UAClD,SAAS,cAAA,CAAe,UAAU,SAAA,CAAY,EAAK,QAAA,CAAS,IAA5D,CACA,SAAS,cAAA,CAAe,UAAU,SAAA,CAAY,EAAK,IAAA,CAAK,OAAA,CAAQ,WAAhE,CACA,SAAS,cAAA,CAAe,QAAQ,SAAA,CAAY,EAAK,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,GAAnE,CACA,SAAS,cAAA,CAAe,WAAW,YAAA,CAAa,MAAM,EAAK,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,GAA7E,CAQN,EAEA,AA5GA,iBACI,GAAI,CACF,IAAI,EAAQ,aAAa,OAAA,CAAQ,QAGjC,GAAI,CADJ,CAAA,EAAQ,KAAK,KAAA,CAAM,GAAO,KAA1B,AAAA,EAGE,OADA,MAAM,oDACC,SAAS,QAAA,CAAS,IAAA,CAAK,eAGhC,IAAM,EAAW,MAAM,MAAM,UAAU,GAAA,CAAI,aAAc,CACvD,OAAQ,MACR,QAAS,CACP,cAAiB,CAAC,OAAO,EAAE,EAAM,CAAC,AACpC,CACF,GAEA,GAAI,AAAoB,MAApB,EAAS,MAAA,CAAgB,CAC3B,MAAM,sEAEN,aAAa,KAAb,GACA,MACF,CAEA,IAAM,EAAO,MAAM,EAAS,IAA5B,EACI,CAAA,EAAS,EAAA,EACX,QAAQ,GAAA,CAAI,CAAC,KAAK,EAAE,EAAK,IAAA,CAAK,mBAAmB,CAAC,EAClD,SAAS,cAAA,CAAe,SAAS,SAAA,CAAU,MAAA,CAAO,WAElD,MAAM,iCAER,GACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAA,CAAM,GACd,MAAM,oBACN,SAAS,QAAA,CAAS,IAAA,CAAO,cAC3B,CACJ","sources":["<anon>","src/assets/js/index.js"],"sourcesContent":["async function checkLogin() {\n    try {\n        let token = localStorage.getItem(\"user\"); // Assuming the token is stored in localStorage\n        token = JSON.parse(token).token;\n        if (!token) {\n            alert(\"Anda belum masuk. Silakan masuk terlebih dahulu.\");\n            return document.location.href = \"./login.html\";\n        }\n        const response = await fetch(globalvar.api + \"checkLogin\", {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n        if (response.status === 401) {\n            alert(\"Token tidak valid atau sesi telah berakhir. Silakan masuk kembali.\");\n            // If the token is invalid, you can also consider clearing the token from localStorage\n            localStorage.clear();\n            return;\n        }\n        const data = await response.json();\n        if (response.ok) {\n            console.log(`Halo ${data.user}! Anda sudah masuk.`);\n            document.getElementById(\"cards\").classList.remove(\"hidden\");\n        } else alert(\"Gagal memeriksa status masuk.\");\n        checkUserInfo();\n    } catch (error) {\n        console.error(error);\n        alert(\"Kamu Belum Masuk\");\n        document.location.href = \"./login.html\";\n    }\n}\nasync function checkUserInfo() {\n    try {\n        let token = localStorage.getItem(\"user\"); // Assuming the token is stored in localStorage\n        token = JSON.parse(token).token;\n        const response = await fetch(globalvar.api + \"checkLogin\", {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`\n            }\n        });\n    } catch (error) {}\n    try {\n        getLocation();\n    } catch (error) {\n        alert(\"Please allow location detecting\");\n    }\n}\nfunction getLocation() {\n    if (navigator.geolocation) navigator.geolocation.getCurrentPosition(showPosition);\n    else alert(\"Geolocation is not supported by this browser.\");\n}\nfunction fahrenheitToCelsius(fahrenheit) {\n    var celsius = (fahrenheit - 32) * 5 / 9;\n    return celsius;\n}\nasync function showPosition(position) {\n    var lat = position.coords.latitude;\n    var long = position.coords.longitude;\n    const userData = {\n        lat,\n        long\n    };\n    const response = await fetch(globalvar.api + \"getLocation\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n    });\n    const data = await response.json();\n    console.log(data);\n    document.getElementById(\"cuaca\").classList.remove(\"hidden\");\n    document.getElementById(\"lokasi\").innerText = data.location.name;\n    document.getElementById(\"status\").innerText = data.cond.weather.description;\n    document.getElementById(\"temp\").innerText = data.cond.weather.temp.cur;\n    document.getElementById(\"urlFoto\").setAttribute(\"src\", data.cond.weather.icon.url);\n// \n//                            <h2 class=\"card-title\" id=\"lokasi\">Purwakarta</h2>\n// <p id=\"status\">sedikit berawan</p>\n// <p id=\"temp\">26°C</p>\n}\ncheckLogin();\nlet strToCards = `\n\n`;\n\n//# sourceMappingURL=index.68493884.js.map\n","async function checkLogin() {\n    try {\n      let token = localStorage.getItem('user'); // Assuming the token is stored in localStorage\n\n      token = JSON.parse(token).token\n      if (!token) {\n        alert('Anda belum masuk. Silakan masuk terlebih dahulu.');\n        return document.location.href=\"./login.html\";\n      }\n  \n      const response = await fetch(globalvar.api+'checkLogin', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n  \n      if (response.status === 401) {\n        alert('Token tidak valid atau sesi telah berakhir. Silakan masuk kembali.');\n        // If the token is invalid, you can also consider clearing the token from localStorage\n        localStorage.clear()\n        return;\n      }\n  \n      const data = await response.json();\n      if (response.ok) {\n        console.log(`Halo ${data.user}! Anda sudah masuk.`);\n        document.getElementById(\"cards\").classList.remove(\"hidden\")\n      } else {\n        alert('Gagal memeriksa status masuk.');\n      }\n      checkUserInfo()\n    } catch (error) {\n      console.error(error);\n      alert('Kamu Belum Masuk');\n      document.location.href = \"./login.html\"\n    }\n}\n\nasync function checkUserInfo(){\n  try {\n    let token = localStorage.getItem('user'); // Assuming the token is stored in localStorage\n\n    token = JSON.parse(token).token\n\n    const response = await fetch(globalvar.api+'checkLogin', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  } catch (error) {\n    \n  }\n\n  try {\n    getLocation()\n  } catch (error) {\n    alert(\"Please allow location detecting\")\n  }\n}\n\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n      alert(\"Geolocation is not supported by this browser.\");\n  }\n}\n\n\nfunction fahrenheitToCelsius(fahrenheit) {\n  var celsius = (fahrenheit - 32) * 5 / 9;\n  return celsius;\n}\n\nasync function showPosition(position) {\n  var lat = position.coords.latitude;\n  var long = position.coords.longitude;\n\n  const userData = { lat,long };\n  \n      const response = await fetch(globalvar.api+'getLocation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n\n  \n      const data = await response.json();\n      console.log(data)\n      document.getElementById(\"cuaca\").classList.remove(\"hidden\")\n      document.getElementById(\"lokasi\").innerText = data.location.name\n      document.getElementById(\"status\").innerText = data.cond.weather.description\n      document.getElementById(\"temp\").innerText = data.cond.weather.temp.cur\n      document.getElementById(\"urlFoto\").setAttribute(\"src\",data.cond.weather.icon.url)\n\n      // \n      \n      //                            <h2 class=\"card-title\" id=\"lokasi\">Purwakarta</h2>\n      // <p id=\"status\">sedikit berawan</p>\n      // <p id=\"temp\">26°C</p>\n  \n}\n\ncheckLogin()\n\n\nlet strToCards = `\n\n`"],"names":["checkUserInfo","token","localStorage","getItem","JSON","parse","fetch","globalvar","api","method","headers","error","navigator","geolocation","getCurrentPosition","showPosition","alert","position","lat","coords","latitude","long","longitude","response","body","stringify","data","json","console","log","document","getElementById","classList","remove","innerText","location","name","cond","weather","description","temp","cur","setAttribute","icon","url","checkLogin","href","status","clear","ok","user"],"version":3,"file":"index.68493884.js.map"}